{"paragraphs":[{"text":"%spark\n\n//ref https://spark.apache.org/docs/latest/ml-classification-regression.html\n//ref https://spark.apache.org/docs/latest/ml-tuning.html#train-validation-split\n\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.regression.LinearRegression\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}\nimport org.apache.log4j._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.mllib.linalg.Vectors\n\n//Feeding the data\n\nval dataset = spark.read.option(\"header\",\"true\").option(\"inferSchema\",\"true\").format(\"csv\").load(\"/root/dataset/listings.csv\")\n\n//to view the fields and types\n\ndataset.printSchema()","user":"anonymous","dateUpdated":"2020-01-12T15:16:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: string (nullable = true)\n |-- name: string (nullable = true)\n |-- host_id: string (nullable = true)\n |-- host_name: string (nullable = true)\n |-- neighbourhood_group: string (nullable = true)\n |-- neighbourhood: string (nullable = true)\n |-- latitude: double (nullable = true)\n |-- longitude: string (nullable = true)\n |-- room_type: string (nullable = true)\n |-- price: integer (nullable = true)\n |-- minimum_nights: integer (nullable = true)\n |-- number_of_reviews: string (nullable = true)\n |-- last_review: string (nullable = true)\n |-- reviews_per_month: double (nullable = true)\n |-- calculated_host_listings_count: integer (nullable = true)\n |-- availability_365: integer (nullable = true)\n\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.regression.LinearRegression\nimport org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}\nimport org.apache.log4j._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.mllib.linalg.Vectors\ndataset: org.apache.spark.sql.DataFrame = [id: string, name: string ... 14 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578314665342_583870061","id":"20200106-124425_1862550151","dateCreated":"2020-01-06T12:44:25+0000","dateStarted":"2020-01-12T15:16:49+0000","dateFinished":"2020-01-12T15:16:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3598"},{"text":"%spark\n\n//convert the longitude data type to double since vector assembler transformer does not take strings\n\n//ref https://stackoverflow.com/questions/37527753/vectorassembler-does-not-support-the-stringtype-type-scala-spark-convert\n//ref https://sparkbyexamples.com/spark/spark-change-dataframe-column-type/\n\nval convert = dataset.withColumn(\"longitude\",col(\"longitude\").cast(DoubleType))\n\nconvert.printSchema()","user":"anonymous","dateUpdated":"2020-01-11T17:53:26+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: string (nullable = true)\n |-- name: string (nullable = true)\n |-- host_id: string (nullable = true)\n |-- host_name: string (nullable = true)\n |-- neighbourhood_group: string (nullable = true)\n |-- neighbourhood: string (nullable = true)\n |-- latitude: double (nullable = true)\n |-- longitude: double (nullable = true)\n |-- room_type: string (nullable = true)\n |-- price: integer (nullable = true)\n |-- minimum_nights: integer (nullable = true)\n |-- number_of_reviews: string (nullable = true)\n |-- last_review: string (nullable = true)\n |-- reviews_per_month: double (nullable = true)\n |-- calculated_host_listings_count: integer (nullable = true)\n |-- availability_365: integer (nullable = true)\n\nconvert: org.apache.spark.sql.DataFrame = [id: string, name: string ... 14 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578318869022_-126943981","id":"20200106-135429_48889024","dateCreated":"2020-01-06T13:54:29+0000","dateStarted":"2020-01-11T17:53:26+0000","dateFinished":"2020-01-11T17:53:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3599"},{"text":"%spark\n\n//viewing the loaded data top 20 rows\n\nconvert.show()\n","user":"anonymous","dateUpdated":"2020-01-11T17:53:26+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------------------+-------+-------------+-------------------+-------------+--------+---------+------------+-----+--------------+-----------------+-----------+-----------------+------------------------------+----------------+\n|    id|                name|host_id|    host_name|neighbourhood_group|neighbourhood|latitude|longitude|   room_type|price|minimum_nights|number_of_reviews|last_review|reviews_per_month|calculated_host_listings_count|availability_365|\n+------+--------------------+-------+-------------+-------------------+-------------+--------+---------+------------+-----+--------------+-----------------+-----------+-----------------+------------------------------+----------------+\n| 49091|COZICOMFORT LONG ...| 266763|    Francesca|       North Region|    Woodlands| 1.44255| 103.7958|Private room|   83|           180|                1| 2013-10-21|             0.01|                             2|             365|\n| 50646|Pleasant Room alo...| 227796|      Sujatha|     Central Region|  Bukit Timah| 1.33235|103.78521|Private room|   81|            90|               18| 2014-12-26|             0.28|                             1|             365|\n| 56334|         COZICOMFORT| 266763|    Francesca|       North Region|    Woodlands| 1.44246|103.79667|Private room|   69|             6|               20| 2015-10-01|              0.2|                             2|             365|\n| 71609|Ensuite Room (Roo...| 367042|      Belinda|        East Region|     Tampines| 1.34541|103.95712|Private room|  206|             1|               14| 2019-08-11|             0.15|                             9|             353|\n| 71896|B&B  Room 1 near ...| 367042|      Belinda|        East Region|     Tampines| 1.34567|103.95963|Private room|   94|             1|               22| 2019-07-28|             0.22|                             9|             355|\n| 71903|Room 2-near Airpo...| 367042|      Belinda|        East Region|     Tampines| 1.34702|103.96103|Private room|  104|             1|               39| 2019-08-15|             0.38|                             9|             346|\n| 71907|3rd level Jumbo r...| 367042|      Belinda|        East Region|     Tampines| 1.34348|103.96337|Private room|  208|             1|               25| 2019-07-25|             0.25|                             9|             172|\n|241503|\"Long stay at The...|1017645|       Bianca|        East Region|        Bedok| 1.32304|103.91363|Private room|   50|            90|              174| 2019-05-31|             1.88|                             4|              59|\n|241508|\"Long stay at The...|1017645|       Bianca|        East Region|        Bedok| 1.32458|103.91163|Private room|   54|            90|              198| 2019-04-28|             2.08|                             4|             133|\n|241510|\"Long stay at The...|1017645|       Bianca|        East Region|        Bedok| 1.32461|103.91191|Private room|   42|            90|              236| 2019-07-31|             2.53|                             4|             147|\n|275343|Conveniently loca...|1439258|K2 Guesthouse|     Central Region|  Bukit Merah| 1.28875|103.80814|Private room|   44|            15|               18| 2019-04-21|             0.23|                            32|             331|\n|275344|15 mins to Outram...|1439258|K2 Guesthouse|     Central Region|  Bukit Merah| 1.28837|103.81099|Private room|   40|            30|               10| 2018-09-13|             0.11|                            32|             276|\n|289234|Booking for 3 bed...| 367042|      Belinda|        East Region|     Tampines| 1.34561|103.95984|Private room|  417|             2|               12| 2019-01-01|             0.14|                             9|             239|\n|294281|5 mins walk from ...|1521514|    Elizabeth|     Central Region|       Newton| 1.31125|103.83816|Private room|   65|             2|              125| 2019-08-22|             1.35|                             6|             336|\n|324945|20 Mins to Sentos...|1439258|K2 Guesthouse|     Central Region|  Bukit Merah| 1.28976|103.80896|Private room|   44|            30|               13| 2019-02-02|             0.15|                            32|             340|\n|330089|Accomo@ REDHILL-I...|1439258|K2 Guesthouse|     Central Region|  Bukit Merah| 1.28677|103.81244|Private room|   40|            30|               10| 2019-04-27|             0.14|                            32|             331|\n|330095|10 mins to Redhil...|1439258|K2 Guesthouse|     Central Region|  Bukit Merah| 1.28537|103.81087|Private room|   31|            90|                3| 2016-08-22|             0.04|                            32|             361|\n|344803|Budget short stay...| 367042|      Belinda|        East Region|     Tampines| 1.34943|103.95951|Private room|   49|             2|               45| 2019-08-11|              0.5|                             9|             357|\n|355955|Double room in an...|1759905|       Aresha|     Central Region|      Geylang|  1.3142|103.90232|Private room|   81|            90|                0|       null|             null|                             1|             173|\n|369141|5mins from Newton...|1521514|    Elizabeth|     Central Region|       Newton|  1.3115|103.83759|Private room|   60|             2|               84| 2019-07-10|             1.17|                             6|             340|\n+------+--------------------+-------+-------------+-------------------+-------------+--------+---------+------------+-----+--------------+-----------------+-----------+-----------------+------------------------------+----------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1578314751897_-1583466015","id":"20200106-124551_738935389","dateCreated":"2020-01-06T12:45:51+0000","dateStarted":"2020-01-11T17:53:26+0000","dateFinished":"2020-01-11T17:53:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3600"},{"text":"%spark\n\n//sorting our table as per requirnment [neighbourhood_group baseed on latitude and longitude]\n\nval datasort = convert.select(dataset(\"neighbourhood_group\").as(\"neighbourhood_group\"),$\"latitude\",$\"longitude\")\n\ndatasort.show()\n\ndatasort.printSchema()\n","user":"anonymous","dateUpdated":"2020-01-11T17:53:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":324,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------+---------+\n|neighbourhood_group|latitude|longitude|\n+-------------------+--------+---------+\n|       North Region| 1.44255| 103.7958|\n|     Central Region| 1.33235|103.78521|\n|       North Region| 1.44246|103.79667|\n|        East Region| 1.34541|103.95712|\n|        East Region| 1.34567|103.95963|\n|        East Region| 1.34702|103.96103|\n|        East Region| 1.34348|103.96337|\n|        East Region| 1.32304|103.91363|\n|        East Region| 1.32458|103.91163|\n|        East Region| 1.32461|103.91191|\n|     Central Region| 1.28875|103.80814|\n|     Central Region| 1.28837|103.81099|\n|        East Region| 1.34561|103.95984|\n|     Central Region| 1.31125|103.83816|\n|     Central Region| 1.28976|103.80896|\n|     Central Region| 1.28677|103.81244|\n|     Central Region| 1.28537|103.81087|\n|        East Region| 1.34943|103.95951|\n|     Central Region|  1.3142|103.90232|\n|     Central Region|  1.3115|103.83759|\n+-------------------+--------+---------+\nonly showing top 20 rows\n\nroot\n |-- neighbourhood_group: string (nullable = true)\n |-- latitude: double (nullable = true)\n |-- longitude: double (nullable = true)\n\ndatasort: org.apache.spark.sql.DataFrame = [neighbourhood_group: string, latitude: double ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1578315194055_653514427","id":"20200106-125314_1112378653","dateCreated":"2020-01-06T12:53:14+0000","dateStarted":"2020-01-11T17:53:28+0000","dateFinished":"2020-01-11T17:53:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3601"},{"text":"%spark\n\n//ref https://spark.apache.org/docs/2.1.0/ml-features.html#vectorassembler\n\n//Combining lalitude and longitude as one geolocation\n\nval test = new VectorAssembler().setInputCols(Array(\"latitude\",\"longitude\")).setOutputCol(\"features\")\n\nval datasort2 = test.transform(datasort).select($\"neighbourhood_group\",$\"features\")\n\ndatasort2.show()\n\ndatasort2.printSchema()\n","user":"anonymous","dateUpdated":"2020-01-11T17:53:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+-------------------+\n|neighbourhood_group|           features|\n+-------------------+-------------------+\n|       North Region| [1.44255,103.7958]|\n|     Central Region|[1.33235,103.78521]|\n|       North Region|[1.44246,103.79667]|\n|        East Region|[1.34541,103.95712]|\n|        East Region|[1.34567,103.95963]|\n|        East Region|[1.34702,103.96103]|\n|        East Region|[1.34348,103.96337]|\n|        East Region|[1.32304,103.91363]|\n|        East Region|[1.32458,103.91163]|\n|        East Region|[1.32461,103.91191]|\n|     Central Region|[1.28875,103.80814]|\n|     Central Region|[1.28837,103.81099]|\n|        East Region|[1.34561,103.95984]|\n|     Central Region|[1.31125,103.83816]|\n|     Central Region|[1.28976,103.80896]|\n|     Central Region|[1.28677,103.81244]|\n|     Central Region|[1.28537,103.81087]|\n|        East Region|[1.34943,103.95951]|\n|     Central Region| [1.3142,103.90232]|\n|     Central Region| [1.3115,103.83759]|\n+-------------------+-------------------+\nonly showing top 20 rows\n\nroot\n |-- neighbourhood_group: string (nullable = true)\n |-- features: vector (nullable = true)\n\ntest: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_75a3a5377410\ndatasort2: org.apache.spark.sql.DataFrame = [neighbourhood_group: string, features: vector]\n"}]},"apps":[],"jobName":"paragraph_1578319998233_-835876055","id":"20200106-141318_201840595","dateCreated":"2020-01-06T14:13:18+0000","dateStarted":"2020-01-11T17:53:29+0000","dateFinished":"2020-01-11T17:53:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3602"},{"text":"%spark\n\nval Array(training, test) = datasort2.randomSplit(Array(0.9, 0.1), seed = 12345)\n\nval linear = new LinearRegression()\n    .setMaxIter(10)\n    \nval paramGrid = new ParamGridBuilder()\n  .addGrid(linear.regParam, Array(0.1, 0.01))\n  .addGrid(linear.fitIntercept)\n  .addGrid(linear.elasticNetParam, Array(0.0, 0.5, 1.0))\n  .build()\n  \nval trainValidationSplit = new TrainValidationSplit()\n  .setEstimator(linear)\n  .setEvaluator(new RegressionEvaluator)\n  .setEstimatorParamMaps(paramGrid)\n  .setTrainRatio(0.8) // 80% training and rest of the 20% willbe automatically selected for test\n  .setParallelism(2)","user":"anonymous","dateUpdated":"2020-01-12T15:26:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"training: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [neighbourhood_group: string, features: vector]\ntest: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [neighbourhood_group: string, features: vector]\nlinear: org.apache.spark.ml.regression.LinearRegression = linReg_bef7880df479\nparamGrid: Array[org.apache.spark.ml.param.ParamMap] =\nArray({\n\tlinReg_bef7880df479-elasticNetParam: 0.0,\n\tlinReg_bef7880df479-fitIntercept: true,\n\tlinReg_bef7880df479-regParam: 0.1\n}, {\n\tlinReg_bef7880df479-elasticNetParam: 0.5,\n\tlinReg_bef7880df479-fitIntercept: true,\n\tlinReg_bef7880df479-regParam: 0.1\n}, {\n\tlinReg_bef7880df479-elasticNetParam: 1.0,\n\tlinReg_bef7880df479-fitIntercept: true,\n\tlinReg_bef7880df479-regParam: 0.1\n}, {\n\tlinReg_bef7880df479-elasticNetParam: 0.0,\n\tlinReg_bef7880..."}]},"apps":[],"jobName":"paragraph_1578358812059_861321329","id":"20200107-010012_1099764478","dateCreated":"2020-01-07T01:00:12+0000","dateStarted":"2020-01-11T17:53:31+0000","dateFinished":"2020-01-11T17:53:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3603"},{"text":"%spark\n\nval model = trainValidationSplit.fit(training)\n\nmodel.transform(test)\n  .select(\"features\", \"label\", \"prediction\")\n  .show()\n","user":"anonymous","dateUpdated":"2020-01-11T17:54:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"java.lang.IllegalArgumentException: Field \"label\" does not exist.\nAvailable fields: neighbourhood_group, features\n  at org.apache.spark.sql.types.StructType$$anonfun$apply$1.apply(StructType.scala:274)\n  at org.apache.spark.sql.types.StructType$$anonfun$apply$1.apply(StructType.scala:274)\n  at scala.collection.MapLike$class.getOrElse(MapLike.scala:128)\n  at scala.collection.AbstractMap.getOrElse(Map.scala:59)\n  at org.apache.spark.sql.types.StructType.apply(StructType.scala:273)\n  at org.apache.spark.ml.util.SchemaUtils$.checkNumericType(SchemaUtils.scala:74)\n  at org.apache.spark.ml.PredictorParams$class.validateAndTransformSchema(Predictor.scala:53)\n  at org.apache.spark.ml.regression.LinearRegression.org$apache$spark$ml$regression$LinearRegressionParams$$super$validateAndTransformSchema(LinearRegression.scala:177)\n  at org.apache.spark.ml.regression.LinearRegressionParams$class.validateAndTransformSchema(LinearRegression.scala:120)\n  at org.apache.spark.ml.regression.LinearRegression.validateAndTransformSchema(LinearRegression.scala:177)\n  at org.apache.spark.ml.Predictor.transformSchema(Predictor.scala:144)\n  at org.apache.spark.ml.tuning.ValidatorParams$$anonfun$transformSchemaImpl$2.apply(ValidatorParams.scala:75)\n  at org.apache.spark.ml.tuning.ValidatorParams$$anonfun$transformSchemaImpl$2.apply(ValidatorParams.scala:74)\n  at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\n  at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)\n  at org.apache.spark.ml.tuning.ValidatorParams$class.transformSchemaImpl(ValidatorParams.scala:74)\n  at org.apache.spark.ml.tuning.TrainValidationSplit.transformSchemaImpl(TrainValidationSplit.scala:68)\n  at org.apache.spark.ml.tuning.TrainValidationSplit.transformSchema(TrainValidationSplit.scala:182)\n  at org.apache.spark.ml.PipelineStage.transformSchema(Pipeline.scala:74)\n  at org.apache.spark.ml.tuning.TrainValidationSplit$$anonfun$fit$1.apply(TrainValidationSplit.scala:123)\n  at org.apache.spark.ml.tuning.TrainValidationSplit$$anonfun$fit$1.apply(TrainValidationSplit.scala:121)\n  at org.apache.spark.ml.util.Instrumentation$$anonfun$11.apply(Instrumentation.scala:185)\n  at scala.util.Try$.apply(Try.scala:192)\n  at org.apache.spark.ml.util.Instrumentation$.instrumented(Instrumentation.scala:185)\n  at org.apache.spark.ml.tuning.TrainValidationSplit.fit(TrainValidationSplit.scala:121)\n  ... 51 elided\n"}]},"apps":[],"jobName":"paragraph_1578359919282_1458750488","id":"20200107-011839_2146437758","dateCreated":"2020-01-07T01:18:39+0000","dateStarted":"2020-01-11T17:54:37+0000","dateFinished":"2020-01-11T17:54:37+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:3604"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2020-01-07T21:43:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578360169740_1702070544","id":"20200107-012249_1746051171","dateCreated":"2020-01-07T01:22:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3605"}],"name":"3.SparkMlib","id":"2EZH12NJN","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"sh:shared_process":[],"pig:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}